散列表（哈希表）简介
散列表（或称为哈希表）是一种使用哈希函数组织数据，以支持快速插入和搜索的数据结构。
哈希表的基本思想是使用哈希函数将键映射到表中一个位置来访问记录，这样可以加快查找速度。

这个过程分为两步：
哈希函数: 将输入（通常是一个字符串或数值）映射到一个固定大小的值，这个值通常是一个整数，这个整数将作为数组的索引。
碰撞解决: 由于多个输入可能映射到同一输出值，因此必须有一种方法来处理这种"碰撞"（collision），常见的策略包括链地址法（使用链表）和开放寻址法（探测其他位置）。

哈希函数
哈希函数能够将输入（可以是任何类型的数据）转换成固定大小的索引（通常是一个整数），这个索引指示了元素存放的位置。
理想情况下，哈希函数会将每个输入值映射到不同的索引上，但实际上，因为输出索引的有限性，不同的输入值有时会映射到相同的索引上，这种情况称为“碰撞”（Collision）。

处理碰撞
为了解决碰撞问题，有两种主要的方法：
链地址法（Chaining）：在这种方法中，哈希表的每个槽位（bucket）维护一个列表，所有映射到该槽位的元素都存放在这个列表中。
                   如果发生碰撞，即两个元素的键通过哈希函数计算得到了相同的位置，则它们都保留在这个位置的列表中。
开放寻址法（Open Addressing）：在这种方法中，当新插入的元素如果发生碰撞，则尝试找到哈希表中的下一个空槽位，将新元素插入到那里。
                            寻找新槽位的过程可以是线性的，也可以是二次的，或者使用双重哈希等更复杂的策略。


使用Python实现散列表的通常思路
在Python中，可以使用数组（列表）数据结构作为基础来实现散列表。以下是实现的基本步骤：

初始化：
确定哈希表的大小（这通常是一个质数，以减少碰撞的可能性）。
创建一个指定大小的列表，每个槽位初始时都是空的或者指向一个空列表（链地址法的情况）。

哈希函数：
设计一个哈希函数，将键转换为表的一个索引。Python的内置函数hash()可以作为哈希函数的一部分，但通常需要对其结果进行一些操作，如取模，以适应表的大小。
即：计算出元素的哈希值后，将其除以哈希表的长度并取余数，这样得到的余数可以确保是小于或等于哈希表长度的，可以用来作为元素在表中的索引

插入操作：
使用哈希函数计算键的索引。
在链地址法中，将键值对作为元素添加到对应索引位置的列表中。
在开放寻址法中，如果计算出的索引位置已被占用，则按照探测序列找到下一个空槽位。

查找操作：
使用哈希函数计算键的索引。
在链地址法中，遍历对应索引位置的列表，查找键匹配的元素。
在开放寻址法中，按照插入时的探测序列，查找键匹配的元素。

删除操作：
和查找操作类似，找到元素后，将其从槽位列表或哈希表中移除。

碰撞解决策略：
如果使用链地址法，设计链表的操作来处理同一个槽位的多个元素。
如果使用开放寻址法，实现一个探测序列来解决碰撞

Python中hash()函数介绍：
在Python中，hash() 函数用于获取一个对象（如果它支持哈希操作）的哈希值。
哈希值是一个整数，它唯一地代表了对象的内容，这对于快速检索数据至关重要，比如在字典（dict）和集合（set）类型的操作中。

哈希值的特点：
不变性：对于不可变类型（如字符串、元组和数字），在对象的生命周期内，它的哈希值是不变的。这意味着，如果一个对象的哈希值计算一次后，每次调用hash()都将返回相同的值。
唯一性：理想情况下，不同的对象应该有不同的哈希值，以减少碰撞（即不同的元素映射到哈希表中的同一个槽位）。
      但实际上，由于哈希值是有限的，不同对象有时会有相同的哈希值，尤其是在大量数据的情况下。

效率：hash() 函数设计得非常高效，使得在哈希表中查找元素可以非常快速地进行。

重要说明：
1. 在Python中，如果对象是不可变的（即哈希值不变），它才能被哈希化。可变数据类型（如列表和字典）不能被哈希化，因为它们的内容可以改变，这会破坏哈希表的完整性。
2. hash() 对相同内容的对象会产生相同的哈希值，但是请注意，Python的哈希种子在每次启动解释器时会改变，所以同一个对象在不同运行的Python进程中可能会有不同的哈希值。这是Python安全特性的一部分，以防止依赖于哈希顺序的恶意行为。